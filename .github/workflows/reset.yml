name: Reset

on:
  workflow_call:
    inputs:
      environment:
        description: 'Environment'
        required: false
        default: stage
        type: string
      helm_chart_file:
        description: 'Helm Chart'
        required: false
        default: 'deployments/kubernetes/helm/chart'
        type: string
      monorepo_application_name:
        description: 'Application Name'
        required: false
        default: ''
        type: string
      monorepo_application_folder:
        description: 'The monorepo apps/NAME/. Required in mono repository'
        required: false
        default: ''
        type: string
      monorepo_image_name:
        description: 'The monorepo image name. Required in mono repository'
        required: false
        default: ''
        type: string
    secrets:
      token:
        description: 'Push Token'
        required: true
      slack_bot_token:
        description: 'Slack Token'
        required: true
      slack_channel_id:
        description: 'Slack Channel ID.'
        required: false

jobs:
  # Deploy Branch to Kubernetes Cluster
  reset:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        ref: stage
        path: destiny-manifest-stage
        token: ${{ secrets.token }}

    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        ref: production
        path: destiny-manifest-production
        token: ${{ secrets.token }}

    - name: Preparing to reset
      shell: bash
      env:
        GH_TOKEN: ${{ secrets.token }}
      run: |-
        export APP_NAME=${{ inputs.monorepo_application_name }}
        export APP_FOLDER_NAME=${{ inputs.monorepo_application_folder }}
        export APP_REPO_NAME=${{github.repository}}
        export APP_REPO_NAME="${APP_REPO_NAME/TrafficDriven\//}"
        if [ ! -z "$APP_NAME" ]
        then
          export APP_REPO_NAME="${{ inputs.monorepo_image_name }}"
        fi

        echo "APP_REPO_NAME=$(echo ${APP_REPO_NAME})" >> $GITHUB_ENV
        echo "APP_FOLDER_NAME=$(echo ${APP_FOLDER_NAME})" >> $GITHUB_ENV

        DIR="destiny-manifest-production${APP_FOLDER_NAME}"

        if [ ! -d "$DIR" ]; then
          echo "no production branch found. Can't reset"
          exit 1
        fi

        cd destiny-manifest-production
        source "${APP_FOLDER_NAME}build-tags"
        echo "COMMIT_ID_PRODUCTION=$(echo $COMMIT_ID)" >> $GITHUB_ENV

        cd ../destiny-manifest-stage

        cat <<-EOF > "${APP_FOLDER_NAME}build-tags"
        export APP_NAME="$APP_NAME"
        export IMAGE_TAG="$COMMIT_ID"
        export COMMIT_ID_ROLLBACK=""
        export COMMIT_ID="$COMMIT_ID"
        export BRANCH="$BRANCH"
        export ACTION="reset"
        EOF

    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        ref: ${{ env.COMMIT_ID_PRODUCTION }}
        path: code-source
        token: ${{ secrets.token }}

    - name: Helming the reset from commit_id code
      shell: bash
      run: |-
        export TARGET_ENVIRONMENT_HELM=${{ inputs.environment }}
        if [ "$TARGET_ENVIRONMENT" == "production" ]
        then
          export TARGET_ENVIRONMENT_HELM=main
        fi

        cd code-source
        helm template ${{ inputs.monorepo_application_folder }}${{ inputs.helm_chart_file }} --set app.targetRevision=$TARGET_ENVIRONMENT_HELM --set app.image.pullPolicy=Always --set app.image.tag=${{ env.COMMIT_ID_PRODUCTION }} --set app.version=${{ env.COMMIT_ID_PRODUCTION }} > "../destiny-manifest-stage/${{ env.APP_FOLDER_NAME }}manifest/manifest.yaml"

      #        cd ../destiny-manifest-stage
      #        source "${{ env.APP_FOLDER_NAME }}build-tags"
      #
      #        cat <<-EOF >> "${{ env.APP_FOLDER_NAME }}manifest/manifest.yaml"
      #        ---
      #        apiVersion: v1
      #        kind: ConfigMap
      #        metadata:
      #          name: ${APP_NAME}
      #          namespace: ${NAMESPACE}
      #          labels:
      #            mintctl/release-info: true
      #        data:
      #          APP_NAME: $APP_NAME
      #          IMAGE_TAG: $COMMIT_ID
      #          COMMIT_ID_ROLLBACK:
      #          COMMIT_ID: $COMMIT_ID
      #          BRANCH: $BRANCH
      #          ACTION: reset"
      #          ENVIRONMENT: ${{ env.ENV }}
      #        EOF

    - name: Pushing manifest to ${{ inputs.environment }} branch
      shell: bash
      env:
        GH_TOKEN: ${{ secrets.token }}
      run: |-
        cd destiny-manifest-stage
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add .
        git commit -m "reset ${{ inputs.environment }}" --no-verify
        git push --set-upstream origin ${{ inputs.environments }}
      continue-on-error: true

    - name: Post Slack Notification
      uses: slackapi/slack-github-action@v1.24.0
      with:
        channel-id: ${{ secrets.slack_channel_id }}
        slack-message: '*GHA* is reseting *${{ env.APP_REPO_NAME }}* in *${{ inputs.environment }}* :tada:'
      env:
        SLACK_BOT_TOKEN: ${{ secrets.slack_bot_token }}
