name: CD

on:
  workflow_call:
    inputs:
      repository_project_id:
        description: 'GAR Project ID'
        required: false
        type: string
      gke_project_id:
        description: 'GKE Project ID'
        required: false
        type: string
      gke_cluster:
        description: 'Cluster name'
        required: false
        type: string
      location:
        description: 'The location of the GAR'
        required: false
        default: us-central1
        type: string
      repository:
        description: 'Image Repository'
        required: false
        type: string
      image:
        description: 'Image to be pushed'
        required: false
        type: string
      go_version:
        description: 'Go version'
        required: false
        default: 'stable'
        type: string
      environment:
        description: 'Environment'
        required: false
        default: dev
        type: string
      helm_chart_file:
        description: 'Helm Chart'
        required: false
        default: 'deployments/kubernetes/helm/chart'
        type: string
      deploy:
        description: 'Deploy to Cluster'
        required: false
        default: false
        type: boolean
      branch:
        description: 'The branch to checkout if deploy is set to false (the default)'
        required: false
        default: main
        type: string
      notification:
        description: 'Send slack notification'
        required: false
        default: true
        type: boolean
      setup:
        description: 'Run setup makefile'
        required: false
        default: false
        type: boolean
      version_target:
        description: 'The makefile target for getting the application version'
        required: false
        default: version
        type: string
      docker_target:
        description: 'The makefile target for building the application docker image'
        required: false
        default: docker-image
        type: string
      application_name:
        description: 'The application deployed. Required in mono repository'
        required: false
        default: "-"
        type: string
    secrets:
      slack_channel_id:
        description: 'Slack Channel ID.'
        required: false
      slack_bot_token:
        description: 'Slack Token'
        required: true
      workload_identity_provider:
        description: 'Workload Identity Provider'
        required: true
      service_account:
        description: 'Service Account email address'
        required: true
      token:
        description: 'Push Token'
        required: true

jobs:
  # Builds, Publish and Deploys docker containers to a kubernetes cluster
  release-deploy:
    runs-on: ubuntu-latest
    steps:

    - if: inputs.deploy == true
      name: Checkout Deploy Code
      uses: actions/checkout@v4
      with:
        path: code-source

    - if: inputs.deploy == true
      name: Checkout Code
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.environment }}
        path: destiny-manifest
        token: ${{ secrets.token }}

      #    - if: inputs.setup == true
      #      uses: abbbi/github-actions-tune@v1

      #    - name: GHA Environment setup
      #      if: inputs.setup == true
      #      shell: bash
      #      run: |-
      #        make setup

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ inputs.go_version }}
        cache: true

    - name: Install Go Dependencies
      shell: bash
      run: |-
        go version

    - name: Echo Input Information
      shell: bash
      run: |-
        echo "You are deploying from the ${GITHUB_REF##*/} branch to the ${{ inputs.environment }} environment" 
    
    - name: Setting branch name
      shell: bash
      run: |-
        echo "BRANCH=$(echo ${GITHUB_REF##*/})" >> $GITHUB_ENV
        echo "ENV=$(echo ${{ inputs.environment }})" >> $GITHUB_ENV
        echo "NODE_ENV=$(echo ${{ inputs.environment }})" >> $GITHUB_ENV
        echo "PROJECT_NAME=$(echo ${{ inputs.image }})" >> $GITHUB_ENV

    - name: Authenticate to Google Cloud
      uses: 'google-github-actions/auth@v1'
      with:
        workload_identity_provider: ${{ secrets.workload_identity_provider }}
        service_account: ${{ secrets.service_account }}

    - name: Set up gCloud SDK
      uses: 'google-github-actions/setup-gcloud@v1'
      with:
        project_id: ${{ inputs.repository_project_id }}

    - name: Configure docker
      run: |
        gcloud auth configure-docker ${{ inputs.location }}-docker.pkg.dev -q

    - name: Run Docker Build
      shell: bash
      run: |-
        cd code-source
        make GITHUB_SHA_VALUE=${{ github.sha }} ${{ inputs.docker_target }}

    - name: Publish the Docker image to Google Container Registry
      shell: bash
      run: |-
        docker tag ${{ inputs.location }}-docker.pkg.dev/${{ inputs.repository_project_id }}/${{ inputs.repository }}/${{ inputs.image }}:${{ github.sha }} ${{ inputs.location }}-docker.pkg.dev/${{ inputs.repository_project_id }}/${{ inputs.repository }}/${{ inputs.image }}:${{ github.sha }}
        docker push ${{ inputs.location }}-docker.pkg.dev/${{ inputs.repository_project_id }}/${{ inputs.repository }}/${{ inputs.image }}:${{ github.sha }}
        docker push ${{ inputs.location }}-docker.pkg.dev/${{ inputs.repository_project_id }}/${{ inputs.repository }}/${{ inputs.image }}:${{ github.sha }}

    - name: Generating manifest
        #     if: inputs.deploy == true
      shell: bash
      env:
        GH_TOKEN: ${{ secrets.token }}
      run: |-
        DIR="destiny-manifest"

        if [ ! -d "$DIR" ]; then
          echo "directory do NOT exists"
          gh repo clone ${{ github.repository }} destiny-manifest -- --branch main
          cd destiny-manifest
          git switch --orphan ${{ env.ENV }}
          git remote remove origin
          git remote add origin "https://${{ secrets.token }}@github.com/${{ github.repository }}.git"
          mkdir manifest
          cd ..
        else
          echo "directory exists"
        fi

        cd code-source
        helm template ${{ inputs.helm_chart_file }} --set app.targetRevision=${{ env.ENV }} --set app.image.pullPolicy=Always --set app.image.tag=${{ github.sha }} --set app.version=${{ github.sha }} > ../destiny-manifest/manifest/manifest.yaml

        cd ../destiny-manifest

        FILE_BUILD_TAGS="build-tags"
        if [ -f "$FILE_BUILD_TAGS" ]; then
          echo "===== sourcing build-tags"
          source "build-tags"
        else
          echo "===== not sourcing build-tags"
        fi

        cat <<-EOF > "build-tags"
        export APP_NAME="${{ inputs.image }}"
        export IMAGE_TAG="${{ github.sha }}"
        export COMMIT_ID_ROLLBACK="$COMMIT_ID"
        export COMMIT_ID="${{ github.sha }}"
        export BRANCH="${{ github.ref_name }}"
        EOF

      #        export COMMIT_MESSAGE=$(cat <<EOF
      #        image ${{ inputs.image }}:${IMAGE_TAG}
      #      
      #        commit ${{ github.sha }}
      #        EOF
      #        )
      #        
      #        echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_ENV

    - name: Pushing manifest to ${{ env.ENV }} branch
      shell: bash
      env:
        GH_TOKEN: ${{ secrets.token }}
      run: |-
        cd destiny-manifest
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add .
        git commit -m "deploy in ${{ env.ENV }}" --no-verify
        git push --set-upstream origin ${{ env.ENV }}

    - name: Post Slack Notification
      if: inputs.notification == true
      uses: slackapi/slack-github-action@v1.24.0
      with:
        channel-id: ${{ secrets.slack_channel_id }}
        slack-message: '*${{ github.actor }}* is shipping *${{ inputs.application_name }}* from *${{ env.BRANCH }}* branch of *${{github.repository}}* to *${{ env.ENV }}* environment :tada:'
      env:
        SLACK_BOT_TOKEN: ${{ secrets.slack_bot_token }}
