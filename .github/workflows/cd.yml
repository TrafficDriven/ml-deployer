name: Deploy

on:
  workflow_call:
    inputs:
      repository_project_id:
        description: 'GAR Project ID'
        required: false
        type: string
        default: 'tdt-platform'
      location:
        description: 'The location of the GAR'
        required: false
        default: us-central1
        type: string
      repository:
        description: 'Image Repository'
        required: false
        type: string
        default: 'mintlist'
      go_version:
        description: 'Go version'
        required: false
        default: 'stable'
        type: string
      environment:
        description: 'Environment'
        required: false
        default: stage
        type: string
      helm_chart_file:
        description: 'Helm Chart'
        required: false
        default: 'deployments/kubernetes/helm/chart'
        type: string
      notification:
        description: 'Send slack notification'
        required: false
        default: true
        type: boolean
      docker_target:
        description: 'The makefile target for building the application docker image'
        required: false
        default: docker-image-pipeline
        type: string
      monorepo_application_name:
        description: 'The application deployed. Required in mono repository'
        required: false
        default: ''
        type: string
      monorepo_application_folder:
        description: 'The monorepo apps/NAME/. Required in mono repository'
        required: false
        default: ''
        type: string
      monorepo_image_name:
        description: 'The monorepo image name. Required in mono repository'
        required: false
        default: ''
        type: string
    secrets:
      slack_channel_id:
        description: 'Slack Channel ID.'
        required: false
      slack_bot_token:
        description: 'Slack Token'
        required: true
      workload_identity_provider:
        description: 'Workload Identity Provider'
        required: true
      service_account:
        description: 'Service Account email address'
        required: true
      token:
        description: 'Push Token'
        required: true

jobs:
  # Builds, Publish and Deploys docker containers to a kubernetes cluster
  release-deploy:
    runs-on: ubuntu-latest
    steps:

    - name: Checkout Deploy Code
      uses: actions/checkout@v4
      with:
        path: code-source

    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.environment }}
        path: destiny-manifest
        token: ${{ secrets.token }}
      continue-on-error: true

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ inputs.go_version }}
        cache: true

    - name: Install Go Dependencies
      shell: bash
      run: |-
        go version

    - name: Setting branch name
      shell: bash
      run: |-
        export APP_NAME=${{ inputs.monorepo_application_name }}
        export APP_FOLDER_NAME=${{ inputs.monorepo_application_folder }}
        export APP_REPO_NAME=${{github.repository}}
        export APP_REPO_NAME="${APP_REPO_NAME/TrafficDriven\//}"
        if [ ! -z "$APP_NAME" ]
        then
          export APP_REPO_NAME="${{ inputs.monorepo_image_name }}"
        fi

        echo "APP_REPO_NAME=$(echo ${APP_REPO_NAME})" >> $GITHUB_ENV
        echo "APP_FOLDER_NAME=$(echo ${APP_FOLDER_NAME})" >> $GITHUB_ENV
        echo "BRANCH=$(echo ${GITHUB_REF##*/})" >> $GITHUB_ENV
        echo "ENV=$(echo ${{ inputs.environment }})" >> $GITHUB_ENV

    - name: Authenticate to Google Cloud
      uses: 'google-github-actions/auth@v1'
      with:
        workload_identity_provider: ${{ secrets.workload_identity_provider }}
        service_account: ${{ secrets.service_account }}

    - name: Set up gCloud SDK
      uses: 'google-github-actions/setup-gcloud@v1'
      with:
        project_id: ${{ inputs.repository_project_id }}

    - name: Configure docker
      run: |
        gcloud auth configure-docker ${{ inputs.location }}-docker.pkg.dev -q

    - name: Run Docker Build
      shell: bash
      run: |-
        cd code-source
        make ENV=${{ env.ENV }} NODE_ENV=${{ env.ENV }} GITHUB_SHA_VALUE=${{ github.sha }} ${{ inputs.docker_target }}

    - name: Publish the Docker image to Google Container Registry
      shell: bash
      run: |-
        docker tag  ${{ inputs.location }}-docker.pkg.dev/${{ inputs.repository_project_id }}/${{ inputs.repository }}/${{ env.APP_REPO_NAME }}:${{ github.sha }} ${{ inputs.location }}-docker.pkg.dev/${{ inputs.repository_project_id }}/${{ inputs.repository }}/${{ env.APP_REPO_NAME }}:${{ github.sha }}
        docker push ${{ inputs.location }}-docker.pkg.dev/${{ inputs.repository_project_id }}/${{ inputs.repository }}/${{ env.APP_REPO_NAME }}:${{ github.sha }}
        docker push ${{ inputs.location }}-docker.pkg.dev/${{ inputs.repository_project_id }}/${{ inputs.repository }}/${{ env.APP_REPO_NAME }}:${{ github.sha }}

    - name: Generating manifest
      shell: bash
      env:
        GH_TOKEN: ${{ secrets.token }}
      run: |-
        cd code-source
        helm template ${{ inputs.monorepo_application_folder }}${{ inputs.helm_chart_file }} --set app.targetRevision=${{ env.ENV }} --set app.image.pullPolicy=Always --set app.image.tag=${{ github.sha }} --set app.version=${{ github.sha }} > ../destiny-manifest/${{ env.APP_FOLDER_NAME }}manifest/manifest.yaml

        cd ../destiny-manifest
        source "${{ env.APP_FOLDER_NAME }}build-tags"

        cat <<-EOF > "${{ env.APP_FOLDER_NAME }}build-tags"
        export APP_NAME="${{ env.APP_NAME }}"
        export IMAGE_TAG="${{ github.sha }}"
        export COMMIT_ID_ROLLBACK="$COMMIT_ID"
        export COMMIT_ID="${{ github.sha }}"
        export BRANCH="${{ github.ref_name }}"
        export ACTION="deploy"
        EOF

    - name: Pushing manifest to ${{ env.ENV }} branch
      shell: bash
      env:
        GH_TOKEN: ${{ secrets.token }}
      run: |-
        cd destiny-manifest
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add .
        git commit -m "deploy in ${{ env.ENV }}" --no-verify
        git push --set-upstream origin ${{ env.ENV }}

    - name: Post Slack Notification
      if: inputs.notification == true
      uses: slackapi/slack-github-action@v1.24.0
      with:
        channel-id: ${{ secrets.slack_channel_id }}
        slack-message: '*${{ github.actor }}* is shipping *${{ env.APP_REPO_NAME }}* from *${{ env.BRANCH }}* branch of *${{github.repository}}* to *${{ env.ENV }}* environment :tada:'
      env:
        SLACK_BOT_TOKEN: ${{ secrets.slack_bot_token }}
