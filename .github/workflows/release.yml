name: Release

on:
  workflow_call:
    inputs:
      environmentFrom:
        description: 'Environment From'
        required: false
        default: stage
        type: string
      environmentTo:
        description: 'Environment To'
        required: false
        default: production
        type: string
      helm_chart_file:
        description: 'Helm Chart'
        required: false
        default: 'deployments/kubernetes/helm/chart'
        type: string
      monorepo_application_name:
        description: 'Application Name'
        required: false
        default: ''
        type: string
      monorepo_application_folder:
        description: 'The monorepo apps/NAME/. Required in mono repository'
        required: false
        default: ''
        type: string
    secrets:
      token:
        description: 'Push Token'
        required: true
      slack_channel_id:
        description: 'Slack Channel ID.'
        required: false
      slack_bot_token:
        description: 'Slack Token'
        required: false

jobs:
  # Deploy Branch to Kubernetes Cluster
  release:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.environmentFrom }}
        path: destiny-manifest-from
        token: ${{ secrets.token }}

    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.environmentTo }}
        path: destiny-manifest-to
        token: ${{ secrets.token }}
      continue-on-error: true

    - name: Preparing to release to ${{ inputs.environmentTo }}
      env:
        GH_TOKEN: ${{ secrets.token }}
      shell: bash
      run: |-
        export APP_NAME=${{ inputs.monorepo_application_name }}
        export APP_FOLDER_NAME=${{ inputs.monorepo_application_folder }}
        export APP_REPO_NAME=${{github.repository}}
        export APP_REPO_NAME="${APP_REPO_NAME/TrafficDriven\//}"
        if [ ! -z "$APP_NAME" ]
        then
          export APP_REPO_NAME="${APP_NAME}"
        fi

        echo "APP_REPO_NAME=$(echo ${APP_REPO_NAME})" >> $GITHUB_ENV
        echo "APP_FOLDER_NAME=$(echo ${APP_FOLDER_NAME})" >> $GITHUB_ENV

        DIR="destiny-manifest-from"
        DIR_TO="destiny-manifest-to/${APP_FOLDER_NAME}manifest"

        if [ ! -d "$DIR" ]; then
          echo "no ${{ inputs.environmentFrom }} branch found. Can't release"
          exit 1
        fi

        cd destiny-manifest-to
        source "${APP_FOLDER_NAME}build-tags"
        export COMMIT_ID_ROLLBACK_ENV_TO=$COMMIT_ID

        cd ../destiny-manifest-from
        source "${APP_FOLDER_NAME}build-tags"
        echo "COMMIT_ID=$(echo $COMMIT_ID)" >> $GITHUB_ENV

        if [[ -z "${COMMIT_ID}" ]]; then
          echo "no COMMIT_ID found. Can't release"
          exit 1
        fi

        cd ../destiny-manifest-to
        cat <<-EOF > "${APP_FOLDER_NAME}build-tags"
        export APP_NAME="${APP_REPO_NAME}"
        export NAMESPACE="${NAMESPACE}"
        export IMAGE_TAG="${COMMIT_ID}"
        export COMMIT_ID_ROLLBACK="${COMMIT_ID_ROLLBACK_ENV_TO}"
        export COMMIT_ID="${COMMIT_ID}"
        export BRANCH="${BRANCH}"
        export ACTION="release"
        EOF

    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        ref: ${{ env.COMMIT_ID }}
        path: code-source
        token: ${{ secrets.token }}

    - name: Helming the release commit_id code
      if: success() || failure()
      shell: bash
      run: |-

        export TARGET_ENVIRONMENT_HELM=${{ inputs.environmentTo }}
        if [ "$TARGET_ENVIRONMENT_HELM" == "production" ]
        then
          export TARGET_ENVIRONMENT_HELM=main
        fi

        cd code-source
        helm template ${{ env.APP_FOLDER_NAME }}${{ inputs.helm_chart_file }} --set app.targetRevision=$TARGET_ENVIRONMENT_HELM --set app.image.pullPolicy=Always --set app.image.tag=${{ env.COMMIT_ID }} --set app.version=${{ env.COMMIT_ID }} > "../destiny-manifest-to/${{ env.APP_FOLDER_NAME }}manifest/manifest.yaml"

        cd ../destiny-manifest-to
        source "${{ env.APP_FOLDER_NAME }}build-tags"

        cat <<-EOF >> "${{ env.APP_FOLDER_NAME }}manifest/manifest.yaml"
        ---
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: ${{ env.APP_REPO_NAME }}-release-info
          namespace: ${NAMESPACE}
          labels:
            mintctl/release-info: "true" 
        data:
          APP_NAME: ${{ env.APP_REPO_NAME }}
          IMAGE_TAG: ${COMMIT_ID}
          COMMIT_ID_ROLLBACK: ${COMMIT_ID_ROLLBACK}
          COMMIT_ID: ${COMMIT_ID}
          BRANCH: ${BRANCH}
          ACTION: release
          ENVIRONMENT: ${{ inputs.environmentTo }}
        EOF

    - name: Pushing manifest to ${{ inputs.environmentTo }} branch
      shell: bash
      env:
        GH_TOKEN: ${{ secrets.token }}
      run: |-
        cd destiny-manifest-to
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add .
        git commit -m "releasing to ${{ inputs.environmentTo }}" --no-verify
        git push --set-upstream origin ${{ inputs.environmentTo }}
      continue-on-error: true

    - name: Post Slack Notification
      uses: slackapi/slack-github-action@v1.24.0
      with:
        channel-id: ${{ secrets.slack_channel_id }}
        slack-message: '*${{ github.actor }}* is releasing *${{ env.APP_REPO_NAME }}* in *${{ inputs.environmentTo }}* :tada:'
      env:
        SLACK_BOT_TOKEN: ${{ secrets.slack_bot_token }}
